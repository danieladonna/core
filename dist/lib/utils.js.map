{"version":3,"sources":["lib/utils.ts"],"names":[],"mappings":"AAAA,YAAY,CAAC;AAEb,MAAO,UAAU,WAAW,YAAY,CAAC,CAAC;AAE1C;IAEE,YAAY,QAAa;QACvB,IAAI,CAAC,QAAQ,GAAG,QAAQ,CAAC;IAC3B,CAAC;IAEM,MAAM,CAAC,QAAa,EAAE,GAAQ,EAAE,GAAQ;QAC7C,IAAI,IAAI,GAAG,IAAI,CAAC;QAChB,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,QAAQ,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,CAAC,CAAC;IACxD,CAAC;IAEM,OAAO,CAAC,IAAY,EAAE,OAAY;QACvC,IAAI,QAAQ,GAAG,UAAU,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;QACxC,MAAM,CAAC,QAAQ,CAAC,OAAO,CAAC,CAAC;IAC3B,CAAC;;AACH,CAAC;AAED,iBAAS,UAAU,CAAC","file":"utils.js","sourcesContent":["'use strict';\r\n/// <reference path=\"../typings/handlebars/handlebars.d.ts\"/>\r\nimport handlebars = require('handlebars');\r\n\r\nclass mlcl_utils {\r\n  molecuel: any;\r\n  constructor(molecuel: any) {\r\n    this.molecuel = molecuel;\r\n  }\r\n\r\n  public getVar(variable: any, req: any, res: any) {\r\n    let self = this;\r\n    return self.resolve(variable, { req: req, res: res });\r\n  }\r\n\r\n  public resolve(text: string, options: any) {\r\n    let template = handlebars.compile(text);\r\n    return template(options);\r\n  };\r\n}\r\n\r\nexport = mlcl_utils;\r\n"]}