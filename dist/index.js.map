{"version":3,"sources":["index.ts"],"names":[],"mappings":"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","file":"index.js","sourcesContent":["'use strict';\nimport 'reflect-metadata';\nimport {Observable, Subject} from '@reactivex/rxjs';\nimport {di, singleton, injectable} from '@molecuel/di';\n\n@singleton\nexport class MlclCore {\n  protected streams: Map<string, MlclStream> = new Map();\n  protected subjects: Map<string, Subject<any>> = new Map();\n\n  /**\n   * @description Creates a new subject which enables EventEmitter like functionality\n   * \n   * @param {string} topic\n   * @returns {Subject<any>}\n   * \n   * @memberOf MlclCore\n   */\n  public createSubject(topic: string): Subject<any> {\n    if(this.subjects.get(topic)) {\n      return this.subjects.get(topic);\n    } else {\n      let subject = new Subject();\n      this.subjects.set(topic, subject);\n      return subject;\n    }\n  }\n\n  /**\n   * @description Creates or returns a Stream\n   * \n   * @param {string} name\n   * @returns {MlclStream}\n   * \n   * @memberOf MlclCore\n   */\n  public createStream(name: string): MlclStream {\n    let currentStream = this.streams.get(name);\n    if(!currentStream) {\n      currentStream = new MlclStream(name);\n      this.streams.set(name, currentStream);\n    }\n    return currentStream;\n  }\n\n  public init(): Promise<any> {\n    let initObs = Observable.from([{}]);\n    let initStream: MlclStream = this.createStream('init');\n    initObs = initStream.renderStream(initObs);\n    return initObs.toPromise();\n  }\n}\n\n/**\n * @export\n * @class MlclStream\n */\n@injectable\nexport class MlclStream {\n  // name of the current stream\n  public name: string;\n  // observer factory methods registered\n  public observerFactories: Array<ObserverFactoryElement> = new Array();\n\n  /**\n   * @description Creates an instance of MlclStream.\n   * \n   * @param {string} name\n   * \n   * @memberOf MlclStream\n   */\n  constructor(name: string) {\n    this.name = name;\n  }\n\n  /**\n   * @description Renders the stream and add flatMaps to the input observable\n   * \n   * @param {Observable} inputObservable\n   * @returns\n   * \n   * @memberOf MlclStream\n   */\n  public renderStream(inputObservable: Observable<any>) {\n    let observables: Array<ObserverFactoryElement> = this.observerFactories.sort(function(a: ObserverFactoryElement, b: ObserverFactoryElement) {\n      return a.priority - b.priority;\n    });\n    for(let observ of observables) {\n      if(!observ.factoryMethod && observ.targetName && observ.targetProperty) {\n        let obsInstance = di.getInstance(observ.targetName);\n        observ.factoryMethod = obsInstance[observ.targetProperty];\n      }\n      inputObservable = inputObservable.flatMap(observ.factoryMethod);\n    }\n    return inputObservable;\n  }\n\n  /**\n   * @description Add observable to the stream\n   * \n   * @param {string} stream\n   * @param {Observable} observable\n   * @param {int} [priority=50]\n   * \n   * @memberOf MlclStream\n   */\n  public addObserverFactory(observerFactory: (data: any) => Observable<any>, priority: number = 50) {\n    let factoryElement = new ObserverFactoryElement(priority, observerFactory);\n    this.observerFactories.push(factoryElement);\n  }\n\n  public addObserverFactoryByName(targetName: string, propertyKey: string, priority: number = 50) {\n    let factoryElement = new ObserverFactoryElement(priority);\n    factoryElement.targetName = targetName;\n    factoryElement.targetProperty = propertyKey;\n    this.observerFactories.push(factoryElement);\n  }\n}\n\n/**\n * @description A ObserverFactory element which is used for queuing observers for a specific queue / observable\n * @export\n * @class ObserverFactoryElement\n */\n@injectable\nexport class ObserverFactoryElement {\n  public priority: number;\n  public factoryMethod: (data: any) => Observable<any>;\n  public targetName: string;\n  public targetProperty: string;\n  /**\n   * @description Creates an instance of ObserverFactoryElement.\n   * \n   * @param {number} [priority=50]\n   * @param null [factoryMethod]\n   * \n   * @memberOf ObserverFactoryElement\n   */\n  public constructor(priority: number = 50, factoryMethod?: (data: any) => Observable<any>) {\n    this.priority = priority;\n    if(factoryMethod) {\n      this.factoryMethod = factoryMethod;\n    }\n  }\n}\n\n\n/**\n * @description Exports a molecuel connection class which stores different kind of connections\n * like database or mail ....\n * @export\n * @class MlclConnection\n */\n@injectable\nexport class MlclConnection {\n  public name: string;\n  public connection: any;\n}\n\n/**\n * Message class for system internal messaging\n * \n * @export\n * @class MlclMessage\n */\n@injectable\nexport class MlclMessage {\n  public topic: string;\n  public message: any;\n  public source: string;\n}\n\n\n/**\n * @description Init decorator adds function as needed during init phase\n * @decorator\n * @export\n * @param {Number} [priority=50]\n * @returns\n */\nexport function init(priority: number = 50) {\n  return function (target, propertyKey: string, descriptor: PropertyDescriptor) {\n    let core: MlclCore;\n    core = di.getInstance('MlclCore');\n    let stream: MlclStream = core.createStream('init');\n    stream.addObserverFactoryByName(target.constructor.name, propertyKey, priority);\n  };\n};\n\n/**\n * @description Health decorator adds function to check a components health\n * @decorator\n * @export\n * @param {Number} [priority=50]\n * @returns\n */\nexport function healthCheck(priority: Number = 50) {\n  console.log(priority);\n  return function (target, propertyKey: string, descriptor: PropertyDescriptor) {\n    console.log(target);\n    console.log(propertyKey);\n    console.log('g(): called');\n  };\n};\n"]}